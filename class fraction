/**
 *  Fraction object from A and B.  For each
 * unique Fraction seen, the program will create a FractionCounter
 * object used to track the number of occurrences of that 
 * specific fraction.  
 * 
 * @author Miriam Mnyuku
 */
public class Fraction implements Comparable<Fraction>
{
    private final int numerator;
    private final int denominator;

    /**
     * Overloaded Constructor 
     * @param: two integers numerator and denominator
     * @return: none
     * precondition: a whole fraction
     * postcondition: a new fraction in it's reduced form, if the fraction is divided by zero
     *                the divisor is set to one, then 
     */
    public Fraction(int n ,int d)
    {
        if(d == 0) 
        {
            throw new IllegalArgumentException("Denominator cannot be 0");
        }
        int[] reduc = reduction(n,d);
        numerator = reduc[0]; //numerator
        denominator = reduc[1];//denominator

    }

    /**
     * Default Constructor 
     * creates a Fraction object and initialize it to 1/1
     * @param: none
     * @return: none
     */
    public Fraction()
    {
        numerator = 0;	
        //can't divide by 0
        denominator = 1;	
    }

    /**
     * copy Constructor 
     * @param: two integers numerator and denominator
     * @return: none
     * precondition: a whole fraction
     * postcondition: a new fraction in it's reduced form, if the fraction is divided by zero
     *                the divisor is set to one, then 
     */
    public Fraction(Fraction f)
    {
        numerator = f.numerator;
        denominator = f.denominator;
    }

    /** Applies to all getters
     * method: get(), returns the numerator or denominator of (this)
     * @param: none
     * @return: an integer, representation of (this)
     * precondition: none
     * postcondition: none
     */
    public double getDoubleVal()
    {
        return (double)numerator/(double)denominator;
    }

    /**
     * This is the reduction algorithm that is used to 
     * reduce the fraction by elude @returns an array of size
     * 2 with the numerator in the first element and denominator
     * in the second element
     */
    public int[] reduction(int n, int d)
    {
        int[] retVal = new int[2];
        int gcd; // greatest common denominator 

        //dealing with only positive integers
        int nNum = Math.max(n,d);
        int dNum = Math.min(n,d);
        while(dNum != 0)
        { //while numerator is not equal 0
            int r = nNum % dNum;
            nNum = dNum;
            dNum = r;
        }

        //update the numerator  
        gcd = nNum;

        int redN = n / gcd;
        int redD = d / gcd;
        retVal[0] = redN; //updating the reduced numerator
        retVal[1] = redD; //updating the denominator numerator
        return retVal;

    }

    /**
     * This is the multiplication algorithm that is used to 
     * reduce the fraction by elude @returns an array of size
     * 2 with the numerator in the first element and denominator
     * in the second element
     */
    public Fraction multiply(Fraction f)
    {
        int thiS = (numerator * f.getNumerator());
        int that = (denominator * f.getDenominator());
        return new Fraction(thiS, that);
    }

    /**
     * This is the subtraction algorithm that is used to 
     * reduce the fraction by elude @returns an array of size
     * 2 with the numerator in the first element and denominator
     * in the second element
     */
    public Fraction sub(Fraction f)
    {
        int numer = (numerator * f.getDenominator()) - (denominator * f.getNumerator());
        int denom = denominator * f.getDenominator();
        return new Fraction(numer, denom);
    }

    /**
     * compares “this” (the numerator) to the “other”
     * numerator being passed in by being passed an
     * Object and we later cast it to a fraction object
     * and @returns is equals
     */
    public boolean equals(Object other)
    {
        boolean equals = false;
        Fraction fractionObj = (Fraction)other;
        if(numerator ==  fractionObj.numerator &&
        denominator ==  fractionObj.denominator)
        {
            equals = true;		
        }
        return equals;
    }

    /** 
     * Applies to all getters
     * method: get(), returns the numerator or denominator of (this)
     * @param: none
     * @return: an integer, representation of (this)
     * precondition: none
     * postcondition: none
     */
    public int getNumerator()
    {
        return numerator;
    }
ra
    /** 
     * Applies to all getters
     * method: get(), returns the numerator or denominator of (this)
     * @param: none
     * @return: an integer, representation of (this)
     * precondition: none
     * postcondition: none
     */
    public int getDenominator()
    {
        return denominator;
    }

    /**
     * @returns the fraction
     */
    public String toString()
    {
        if (denominator == 1)
        {
            return numerator+""; 
        }
        return numerator + "/" + denominator;
    }
    
    /**
     * CompareTo: compares two fraction object to see which is bigger/smaller
     *             based on dollar amount then cents
     * @param  Money object
     * @return interger  1,-1, or 0  
     * precondition: none
     * postcondition: compares two fraction object and return 1 if greater, -1 if less and 0 if they are equal
     */
    public int compareTo(Fraction other)
    {
        //normalizing the common denominator before comparing
        int common = numerator * other.denominator;
        int otherCommon = other.numerator * denominator;
        return common - otherCommon;
    }
}
